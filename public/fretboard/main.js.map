{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;;;;AAAgD;AACd;AAClC;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qBAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,eAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,aAAa;AACxC;AACA;AACA,6BAA6B,wCAAK;AAClC;AACA,uBAAuB,wCAAK;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,IAAI,uDAAgB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACnMwC;AACN;AAClC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iDAAO;AACf;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iDAAO;AACnB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA,qDAAqD,QAAQ;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oDAAU;AAC3B,IAAI,8CAAI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC5IgD;AACd;AACO;AACzC;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,SAAS,wCAAK;AACd;AACA;AACA;AACA;AACA,qBAAqB,iNAAO;AAC5B;AACA,gCAAgC,iNAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wCAAK;AACrB;AACA;AACA;AACA;AACA,yBAAyB,wCAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wCAAK;AACrB;AACA,qCAAqC,mBAAmB;AACxD;AACA,uBAAuB,wCAAK;AAC5B;AACA;AACA;AACA;AACA,qDAAqD,4CAAO,cAAc,4CAAO;AACjF,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;UC3EA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,sDAAsD;WACtD,sCAAsC,iEAAiE;WACvG;WACA;WACA;WACA;WACA;WACA;;;;;WCzBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;UENA;UACA;UACA;UACA","sources":["webpack://ryanguitar.uk/./custom_pages/fretboard/canvas.js","webpack://ryanguitar.uk/./custom_pages/fretboard/main.js","webpack://ryanguitar.uk/./custom_pages/fretboard/presets.js","webpack://ryanguitar.uk/webpack/bootstrap","webpack://ryanguitar.uk/webpack/runtime/create fake namespace object","webpack://ryanguitar.uk/webpack/runtime/define property getters","webpack://ryanguitar.uk/webpack/runtime/hasOwnProperty shorthand","webpack://ryanguitar.uk/webpack/runtime/make namespace object","webpack://ryanguitar.uk/webpack/before-startup","webpack://ryanguitar.uk/webpack/startup","webpack://ryanguitar.uk/webpack/after-startup"],"sourcesContent":["import { gatherParameters, notes } from \"./main\"\r\nimport loadPreset from \"./presets\"\r\n\r\nexport const colours = {\r\n    noteBorder: 'white',\r\n      noteText: 'white', \r\n          grid: '#717171', \r\n    rightClick: '#ff6347',\r\n     leftClick: '#717171' \r\n}\r\nlet stringGap, fretGap, canvas, ctx, fretCount, stringCount\r\nlet fretboard = {}\r\nlet offset = {\r\n    top: 30,\r\n bottom: 50,\r\n   left: 35,\r\n  right: 20 \r\n}\r\n\r\nexport function draw( data ) \r\n{\r\n    setValues( data ) \r\n\r\n    ctx.clearRect( 0, 0, canvas.width, canvas.height)\r\n    ctx.beginPath()\r\n    ctx.lineWidth = 2\r\n    ctx.strokeStyle = colours.grid\r\n\r\n    ctx.rect(\r\n        offset.left,\r\n        offset.top,\r\n        fretboard.width,\r\n        fretboard.height \r\n    ) \r\n\r\n\r\n    for( let x = 0; x < stringCount + 1; x++ ) \r\n    {\r\n        ctx.strokeStyle = colours.grid \r\n        ctx.moveTo( offset.left,                   offset.top + ( x * stringGap ) ) \r\n        ctx.lineTo( offset.left + fretboard.width, offset.top + ( x * stringGap ))\r\n\r\n        ctx.fillStyle = colours.leftClick\r\n        ctx.font = \"17px literata\"\r\n        ctx.textAlign = \"center\"\r\n        ctx.fillText( \r\n            data.strings[ x ].pitch.toUpperCase(),\r\n            10, \r\n            offset.top + ( x * stringGap ) + 6,\r\n        )\r\n    }\r\n    \r\n    for( let x = 0; x < fretCount; x++ ) \r\n    {\r\n        ctx.fillStyle = colours.grid\r\n        ctx.moveTo( offset.left + ( x * fretGap ), offset.top )\r\n        ctx.lineTo( offset.left + ( x * fretGap ), offset.top + fretboard.height ) \r\n\r\n        ctx.fillStyle = colours.leftClick\r\n        ctx.font = \"17px literata\"\r\n        ctx.textAlign = \"center\"\r\n        ctx.fillText( \r\n            x + data.startFret,\r\n            offset.left + ( x * fretGap ) + fretGap / 2, \r\n            offset.top + fretboard.height + 40 \r\n        )\r\n    }\r\n\r\n    ctx.stroke()\r\n\r\n    for( let x in data.strings ) \r\n    { \r\n        for( let y in data.strings[ x ].selected ) \r\n        {\r\n            let selected = data.strings[ x ].selected[ y ]\r\n\r\n            ctx.beginPath() \r\n\r\n            let radius = ( fretGap * 0.7 ) / 2 \r\n            if( radius > 20 ) radius = 20\r\n\r\n            ctx.strokeStyle = colours.noteBorder\r\n            ctx.lineWidth = 1  \r\n\r\n            ctx.arc( \r\n                offset.left + ( ( selected.fret - data.startFret ) * fretGap ) + ( fretGap / 2 ), \r\n                offset.top + ( x * stringGap ),\r\n                radius, 0, 2 * Math.PI\r\n            )\r\n\r\n            ctx.fillStyle = selected.colour \r\n\r\n            ctx.fill() \r\n            ctx.stroke()\r\n            ctx.beginPath()\r\n\r\n            ctx.fillStyle = colours.noteText\r\n            ctx.font = `${ fretGap / 5 }px literata`\r\n            ctx.textAlign = \"center\"\r\n\r\n            let rootOffset = notes[ data.accidentals ].indexOf( data.strings[ x ].pitch )\r\n\r\n            let note = notes[ data.accidentals ][ ( rootOffset + selected.fret ) % 12 ] \r\n            note = note.charAt( 0 ).toUpperCase() + note.slice( 1 )\r\n\r\n            ctx.fillText( note, \r\n                offset.left + ( ( selected.fret - data.startFret ) * fretGap ) + ( fretGap / 2 ), \r\n                offset.top + ( x * stringGap ) + ( fretGap / 13 )\r\n            ) \r\n\r\n            ctx.stroke() \r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function clicked( event, data, rightClick )\r\n{\r\n    let x = event.offsetX - offset.left \r\n    let y = event.offsetY - offset.top + ( stringGap / 2 ) \r\n\r\n    if( x < 0 ) x = 0 \r\n    if( y < 0 ) y = 0 \r\n \r\n    x = Math.floor( x / fretGap ) + data.startFret\r\n    y = Math.floor( y / stringGap ) \r\n\r\n    if( y > stringCount ) y = stringCount \r\n    \r\n    let fretAlreadySelected = false\r\n\r\n    for( let f in data.strings[ y ].selected ) \r\n    {\r\n        let selected = data.strings[ y ].selected[ f ]\r\n\r\n        if( selected.fret === x ) \r\n        {\r\n            if( selected.colour === colours.rightClick && !rightClick ) \r\n            {\r\n                selected.colour = colours.leftClick\r\n            } \r\n            else if ( selected.colour === colours.leftClick && rightClick ) \r\n            {\r\n                selected.colour = colours.rightClick\r\n            } \r\n            else \r\n            {\r\n                data.strings[ y ].selected.splice( f, 1 ) \r\n            }\r\n            fretAlreadySelected = true \r\n        }\r\n    }\r\n    if( !fretAlreadySelected ) \r\n    {\r\n        data.strings[ y ].selected.push( { \r\n            fret: x, \r\n            colour: rightClick ? colours.rightClick : colours.leftClick \r\n        })\r\n    }\r\n    gatherParameters()\r\n}\r\n\r\n\r\n\r\nfunction setValues( data ) \r\n{\r\n    canvas = document.getElementById( 'fretboard' ) \r\n    ctx    = canvas.getContext( '2d' ) \r\n\r\n    fretCount   = data.endFret - data.startFret + 1\r\n    stringCount = data.strings.length - 1\r\n\r\n    canvas.style.height = ( data.strings.length * 8 ) + '%'\r\n\r\n    if( fretCount <= 20 ) \r\n    {\r\n        canvas.style.width = ( fretCount * 80 ) + 'px'\r\n    } else \r\n    {\r\n        canvas.style.width = \"95%\" \r\n    }\r\n\r\n    let dimensions = canvas.getBoundingClientRect() \r\n\r\n    canvas.height = Math.floor( dimensions.height )\r\n    canvas.width  = Math.floor( dimensions.width  )  \r\n\r\n    fretboard = {\r\n        height: canvas.height - offset.top - offset.bottom,\r\n         width: canvas.width - offset.left - offset.right,\r\n    }\r\n\r\n    stringGap = fretboard.height / stringCount   \r\n    fretGap   = fretboard.width  / fretCount\r\n}","import { draw, clicked } from './canvas'\r\nimport loadPreset from './presets'\r\n\r\nlet maxFrets = 35\r\n\r\nexport const notes = {\r\n    sharps: [ 'a', 'a#', 'b', 'c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#' ],\r\n    flats:  [ 'a', 'bb', 'b', 'c', 'db', 'd', 'eb', 'e', 'f', 'gb', 'g', 'ab' ]\r\n}\r\n\r\nlet data = {\r\n    startFret: undefined, \r\n      endFret: undefined, \r\n  accidentals: undefined, \r\n      strings: []\r\n}\r\n\r\nwindow.onload = function() \r\n{\r\n    registerEventListeners() \r\n    gatherParameters() \r\n}\r\n\r\n\r\nfunction registerEventListeners() \r\n{\r\n    [ ...document.getElementsByTagName( 'input' ) ].forEach( \r\n        input => {\r\n            input.onchange = gatherParameters\r\n        }\r\n    )\r\n\r\n    document.getElementById( 'fretboard' ).onclick = function( event ) \r\n    { \r\n        clicked( event, data, false  ) \r\n    }\r\n\r\n    document.getElementById( 'fretboard' ).addEventListener('contextmenu', \r\n        function( event ) \r\n        {\r\n            event.preventDefault() \r\n            clicked( event, data, true ) \r\n        }, \r\n        false\r\n    )\r\n\r\n    window.addEventListener( 'resize', gatherParameters )\r\n\r\n    document.getElementById( 'clear'    ).onclick = clearFretboard\r\n    document.getElementById( 'download' ).onclick = downloadFretboard\r\n}\r\n\r\n\r\nexport function gatherParameters( preset )\r\n{\r\n    let inputs = {\r\n              frets: document.getElementById( 'frets-input' ),\r\n             tuning: document.getElementById( 'tuning-input' ),\r\n        accidentals: document.querySelector( 'input[name=\"accidentals\"]:checked' )\r\n    }\r\n\r\n    data.tuning = inputs.tuning.value\r\n        .replace( /\\s/g, '' )\r\n        .toLowerCase() \r\n        .split( ',' )\r\n        .reverse() \r\n\r\n    let frets = inputs.frets.value\r\n        .replace( /\\s/g, '' ) \r\n        .split( '-' )\r\n\r\n    data.startFret = parseInt( frets[ 0 ] )\r\n    data.endFret   = parseInt( frets[ 1 ] )\r\n\r\n    if( isNaN( data.startFret ) || isNaN( data.endFret ) ) \r\n    {\r\n        data.startFret = 0\r\n        data.endFret   = 24\r\n    }\r\n\r\n    data.startFret = data.startFret >= data.endFret ? 0 : data.startFret\r\n    data.endFret   = data.endFret > maxFrets ? maxFrets : data.endFret \r\n\r\n    inputs.frets.value = data.startFret + '-' + data.endFret\r\n\r\n    data.accidentals = inputs.accidentals.value \r\n\r\n    if( !checkAccidentals() ) { /* Invalid tuning */ }   \r\n\r\n    buildStrings( preset ) \r\n}\r\n\r\n\r\nfunction buildStrings( preset ) \r\n{\r\n    for( let x in data.tuning ) \r\n    {\r\n        if( !data.strings[ x ] ) data.strings[ x ] = { selected: [] } \r\n        data.strings[ x ].pitch = data.tuning[ x ]    \r\n    }\r\n    for( let x = Object.keys( data.strings ).length; x >= 0; x-- ) \r\n    {\r\n        if( x >= data.tuning.length ) {\r\n            data.strings.splice( x, 1 )\r\n            continue\r\n        }\r\n        for( let y in data.strings[ x ].selected ) {\r\n            if( data.strings[ x ].selected[ y ].fret > data.endFret ||\r\n                data.strings[ x ].selected[ y ].fret < data.startFret \r\n            ) {\r\n                data.strings[ x ].selected.splice( y, 1 ) \r\n            }\r\n        }\r\n    }\r\n    if( preset ) loadPreset( data )\r\n    draw( data ) \r\n}\r\n\r\n\r\nfunction checkAccidentals()\r\n{\r\n    for( let x of data.tuning ) \r\n        if( !notes[ data.accidentals ].includes( x ) ) return false \r\n    return true \r\n}\r\n\r\n\r\nfunction clearFretboard() \r\n{\r\n    for( let x of data.strings ) x.selected = [] \r\n    gatherParameters( false ) \r\n}\r\n\r\n\r\nfunction downloadFretboard() \r\n{\r\n    let link = document.createElement('a')\r\n    link.download = 'fretboard.png'\r\n    link.href = document.getElementById( 'fretboard' ).toDataURL()\r\n    link.click()\r\n}","import { gatherParameters, notes } from './main' \r\nimport { colours } from './canvas'\r\nimport * as presets from './presets.json' \r\n\r\n\r\nexport default function loadPreset( data )\r\n{\r\n    let input = document.getElementById( 'scale-input' ).value, root, scale \r\n\r\n    if( !input ) return \r\n\r\n    try {\r\n        let words = input.split( ' ' )\r\n\r\n        words = words.map( word => word.toLowerCase().replace( /\\s/g, '' ) )\r\n\r\n        words = words.filter( word => word.trim() != '' )\r\n\r\n        root = words[ 0 ] \r\n\r\n        words.splice( 0, 1 ) \r\n\r\n        scale = words.join( ' ' ) \r\n\r\n    } catch ( e ) { \r\n        console.log( e ) \r\n        return \r\n    }\r\n\r\n    if( !notes[ data.accidentals ].includes( root ) ) \r\n    {\r\n        alert( 'Incorrect accidentals entered' )\r\n        return \r\n    }\r\n    if( Object.keys( presets ).includes( scale ) ) \r\n    {\r\n        solveFrets( data, root, presets[ scale ] ) \r\n    } \r\n    else {\r\n        alert( 'Scale not found' ) \r\n    }\r\n}\r\n\r\n\r\nfunction solveFrets( data, root, intervals ) \r\n{\r\n    let index = notes[ data.accidentals ].indexOf( root )\r\n\r\n    let scaleTones = [] \r\n\r\n    for( let x of intervals ) {\r\n        scaleTones.push( notes[ data.accidentals ][ index % 12 ] ) \r\n        index += x  \r\n    }\r\n\r\n    for( let x of data.strings ) x.selected = [] \r\n\r\n    for( let x in data.strings ) {\r\n\r\n        index = notes[ data.accidentals ].indexOf( data.strings[ x ].pitch )\r\n\r\n        for( let y = data.startFret; y <= data.endFret; y++ ) {\r\n\r\n            let note = notes[ data.accidentals ][ ( y + index ) % 12 ] \r\n\r\n            if( scaleTones.includes( note ) ) {\r\n\r\n                data.strings[ x ].selected.push({\r\n                    fret: y, colour: note === root ? colours.rightClick : colours.leftClick \r\n                })\r\n            } \r\n\r\n        } \r\n    }\r\n\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./custom_pages/fretboard/main.js\");\n",""],"names":[],"sourceRoot":""}